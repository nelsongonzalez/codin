class t{constructor(t,e={passive:!0}){this._cb=t,this._opt=e,this._observationTargets=new Map}observe(t,e){const s=this._observationTargets.get(t)||[];s.includes(e)||(()=>{t.addEventListener(e,this,this._opt),this._observationTargets.set(t,s.concat(e))})()}unobserve(t,e){const s=this._observationTargets.get(t)||[],i=e&&s.includes(e)?[e]:e?[]:s,o=s.filter(t=>!i.includes(t));i.forEach(e=>t.removeEventListener(e,this)),o.length>0?this._observationTargets.set(t,o):this._observationTargets.delete(t)}handleEvent(t){this._cb(t,this)}}export{t as EventObserver};
