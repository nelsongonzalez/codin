{"version":3,"file":"promise-event.js","sourceRoot":"","sources":["../src/build/promise-event.ts"],"names":[],"mappings":"AAIA,MAAM,UAAU,YAAY,CAC3B,OAAgB,EAChB,IAAc,EACd,QAA0C;IAE1C,MAAM,QAAQ,GAAG,CAAC,OAAa,EAAE,MAAY,EAAE,EAAE;QAC/C,OAAO;YACL,WAAW,EAAE,UAAU,GAAM;gBAC3B,IAAI;oBACF,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;iBACxD;gBAAC,OAAO,KAAK,EAAE;oBACd,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;wBAAS;oBACR,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;iBAChD;YACH,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;IACF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACJ,CAAC;AAED,eAAe,YAAY,CAAC","sourcesContent":["export interface PromisedElementEventCallback<E extends Event> {\n (element: Element, event?: E): any;\n}\n\nexport function promiseEvent<T extends keyof ElementEventMap, E extends Event>(\n element: Element,\n type: T|string,\n callback?: PromisedElementEventCallback<E>,\n): Promise<any> {\n const resolver = (resolve?: any, reject?: any) => {\n   return {\n     handleEvent: function (evt: E) {\n       try {\n         callback ? resolve(callback(element, evt)) : resolve();\n       } catch (error) {\n         reject(error);\n       } finally {\n         element.removeEventListener(type, this, false);\n       }\n     }\n   };\n };\n return new Promise((resolve, reject) => {\n   element.addEventListener(type, resolver(resolve, reject), false);\n });\n}\n\nexport default promiseEvent;\n"]}