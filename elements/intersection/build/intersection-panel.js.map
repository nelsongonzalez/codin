{"version":3,"file":"intersection-panel.js","sourceRoot":"","sources":["../src/build/intersection-panel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IntersectionEvent,\n  IntersectionEventTypes,\n  canObserveIntersection,\n  createIntersctionObserver,\n} from './lib/intersection-observer';\n\nexport * from './lib/intersection-observer';\n\nexport enum attributes {\n disabled = 'disabled',\n root = 'root',\n margin = 'margin',\n threshold = 'threshold',\n visible = 'visible',\n}\n\n/**\n * @property visible [get]\n * Reflects visibilty of element when oberved\n *\n * @attribute root\n * The element that is used as the viewport for checking visiblity of the target.\n * Must be the ancestor of this element and visible fom document @todo check closes document (shadowroot).\n * Defaults to the browser viewport if not specified.\n *\n * @attribute margin\n * Margin around the root. The values can be percentages.\n * Can have values similar to the CSS margin property, e.g. \"10px 20px 30px 40px\" (top, right, bottom, left).\n * This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections.\n *\n * @attribute threshold\n * Array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.\n * If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5.\n * If you want the callback run every time visibility passes another 25%, you would specify '0, 0.25, 0.5, 0.75, 1'.\n * The default is 0 (meaning as soon as even one pixel is visible, the callback will be run).\n * A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.\n *\n * @attribute disabled\n * Enables or disables the intersection observer, by removing or adding the attribute disabled.\n * Element becomes disabled if no IntersectionObserver in window @see polyfill\n *\n * @event @see IntersectionObserver\n */\nexport class IntersectionPanel extends HTMLElement {\n\n protected _observer: IntersectionObserver|undefined;\n\n /** @inheritDoc */\n static get observedAttributes() {\n  return [attributes.disabled];\n }\n\n /**\n  * When element is disabled observation of intersactions are disabled.\n  * Element becomes disabled if no {IntersectionObserver} is in window when connected to DOM\n  * @see polyfill\n  */\n public get disabled(): Boolean {\n  return !(!this.hasAttribute(attributes.disabled) && canObserveIntersection());\n }\n\n /**\n  * Enabling observation will check if {IntersectionObserver} is in window.\n  * If the\n  * @param disabled {Boolean} Enables or disables intersection observing of element.\n  * @see polyfill\n  */\n public set disabled(disabled: Boolean) {\n  const enabled = !disabled && canObserveIntersection();\n  enabled ? this.removeAttribute(attributes.disabled) : this.setAttribute(attributes.disabled, '');\n }\n\n /**\n  * If observer, the attrbiute visible will be toggled when intersecting\n  * @readonly\n  */\n public get visible(): Boolean {\n  return this.hasAttribute(attributes.visible);\n }\n\n /** @inheritDoc */\n connectedCallback() {\n  this.disabled = this.disabled;\n  this.disabled || this.observe();\n }\n\n /** @inheritDoc */\n disconnectedCallback() {\n  this._removeObserver();\n }\n\n /** @inheritDoc */\n attributeChangedCallback(name: string) {\n  switch (name) {\n    case attributes.disabled:\n     this.disabled ? this.unobserve() : this.observe();\n     break;\n  }\n }\n\n /**\n  * @internal should only be called internally\n  * Handles events from observer\n  * @param param0 {IntersectionEvent}\n  */\n handleEvent({detail}: IntersectionEvent<IntersectionEventTypes.intersection>) {\n  const {entry} = detail;\n  entry.isIntersecting ? this.setAttribute(attributes.visible, '') : this.removeAttribute(attributes.visible);\n }\n\n /**\n  * Start observing element\n  */\n public observe(): void {\n  this._observer || this._createObserver();\n  this.addEventListener(IntersectionEventTypes.intersection, this, false);\n  this._observer && this._observer.observe(this);\n }\n\n /**\n  * Stop observing element, this will not remove the observer.\n  */\n public unobserve(): void {\n  this.removeEventListener(IntersectionEventTypes.intersection, this);\n  this._observer && this._observer.unobserve(this);\n }\n\n protected _recreateObserver(): void {\n  this._createObserver();\n }\n\n protected _createObserver(): void {\n  this._observer && this._removeObserver();\n  this._observer = createIntersctionObserver(this._getObserverOptions());\n }\n\n protected _removeObserver(): void {\n  this._observer && this._observer.disconnect();\n  delete this._observer;\n }\n\n protected _getObserverOptions(): IntersectionObserverInit {\n  const attrRoot = this.getAttribute('root');\n  const attrThreshold = this.getAttribute('threshold');\n  const attrMargin = this.getAttribute('margin');\n  return {\n    root: attrRoot ? document.querySelector(attrRoot) : null,\n    rootMargin: attrMargin || undefined,\n    threshold: attrThreshold ? attrThreshold.split(',').map(parseFloat) : [0]\n   };\n }\n\n protected _visible(visible: Boolean): void {\n  visible ? this.setAttribute(attributes.visible, '') : this.removeAttribute(attributes.visible);\n }\n}\n\nexport default IntersectionPanel;\n"]}