{"version":3,"file":"intersection-observer.js","sourceRoot":"","sources":["../../src/build/lib/intersection-observer.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,2DAAiC,CAAA;IACjC,yDAA+B,CAAA;IAC/B,yDAA+B,CAAA;AACjC,CAAC,EAJW,sBAAsB,KAAtB,sBAAsB,QAIjC;AAOD,MAAM,OAAO,iBAAoD,SAAQ,WAAoC;IAC5G,YAAY,IAAO,EAAE,MAA+B;QACnD,KAAK,CAAC,IAAI,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;IACvB,CAAC;CACD;AAID,MAAM,OAAO,2BAA4B,SAAQ,iBAA+C;IAC/F,YAAY,MAA+B;QAC1C,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC;QAC1G,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrB,CAAC;CACD;AAED,MAAM,UAAU,sBAAsB;IACpC,OAAO,sBAAsB,IAAI,MAAM,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,OAAkC;IAC1E,IAAI,CAAC,sBAAsB,EAAE;QAAE,MAAM,KAAK,CAAC,4CAA4C,CAAC,CAAC;IACzF,OAAO,IAAI,oBAAoB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC;AAED,SAAS,cAAc,CAAC,OAAoC,EAAE,QAAkC;IAC9F,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,iBAAiB,CAA6B,KAAgC;IACrF,MAAM,MAAM,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;IACvC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,sBAAsB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;IAC/F,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,eAAe,yBAAyB,CAAC","sourcesContent":["export enum IntersectionEventTypes {\n  intersection = 'cwc.intersection',\n  visible = 'cwc.intersection.in',\n  hidden = 'cwc.intersection.out'\n}\n\nexport interface IntersectionEventDetail {\n  observer: IntersectionObserver;\n  entry: IntersectionObserverEntry;\n}\n\nexport class IntersectionEvent<T extends IntersectionEventTypes> extends CustomEvent<IntersectionEventDetail> {\n constructor(type: T, detail: IntersectionEventDetail) {\n  super(type, {detail});\n }\n}\n\nexport type IntersectionVisibilityEvents = IntersectionEventTypes.visible | IntersectionEventTypes.hidden;\n\nexport class IntersectionVisibilityEvent extends IntersectionEvent<IntersectionVisibilityEvents> {\n constructor(detail: IntersectionEventDetail) {\n  const type = detail.entry.isIntersecting ? IntersectionEventTypes.visible : IntersectionEventTypes.hidden;\n  super(type, detail);\n }\n}\n\nexport function canObserveIntersection() {\n  return 'IntersectionObserver' in window;\n}\n\nexport function createIntersctionObserver(options?: IntersectionObserverInit) {\n  if (!canObserveIntersection()) throw Error('missing IntersectionObserver @see polyfill');\n  return new IntersectionObserver(onIntersection, options);\n}\n\nfunction onIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserverInit) {\n  entries.forEach(onEntryInserction.bind(observer));\n}\n\nfunction onEntryInserction(this: IntersectionObserver, entry: IntersectionObserverEntry) {\n  const detail = {observer: this, entry};\n  entry.target.dispatchEvent(new IntersectionEvent(IntersectionEventTypes.intersection, detail));\n  entry.target.dispatchEvent(new IntersectionVisibilityEvent(detail));\n}\n\nexport default createIntersctionObserver;"]}