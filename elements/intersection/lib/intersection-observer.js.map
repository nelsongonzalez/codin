{"version":3,"file":"intersection-observer.js","sourceRoot":"","sources":["../src/lib/intersection-observer.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,4BAIX;AAJD,WAAY,4BAA4B;IACvC,gEAAgC,CAAA;IAChC,sDAAsB,CAAA;IACtB,oDAAoB,CAAA;AACrB,CAAC,EAJW,4BAA4B,KAA5B,4BAA4B,QAIvC;AAOD,MAAM,OAAO,uBAAgE,SAAQ,WAA0C;IAC9H,YAAY,IAAO,EAAE,MAAqC;QACzD,KAAK,CAAC,IAAI,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;IACvB,CAAC;CACD;AAID,MAAM,OAAO,iCAAkC,SAAQ,uBAA2D;IACjH,YAAY,MAAqC;QAChD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B,CAAC,MAAM,CAAC;QACtH,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrB,CAAC;CACD;AAED,MAAM,UAAU,sBAAsB;IACpC,OAAO,sBAAsB,IAAI,MAAM,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,OAAkC;IAC1E,IAAI,CAAC,sBAAsB,EAAE;QAAE,MAAM,KAAK,CAAC,4CAA4C,CAAC,CAAC;IACzF,OAAO,IAAI,oBAAoB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC;AAED,SAAS,cAAc,CAAC,OAAoC,EAAE,QAAkC;IAC9F,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,iBAAiB,CAA6B,KAAgC;IACrF,MAAM,MAAM,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;IACvC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,uBAAuB,CAAC,4BAA4B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;IAC3G,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,iCAAiC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5E,CAAC;AAED,eAAe,yBAAyB,CAAC","sourcesContent":["export enum CustomIntersectionEventTypes {\n intersection = 'cwcIntersection',\n visible = 'cwcVisible',\n hidden = 'cwcHidden',\n}\n\nexport interface CustomIntersectionEventDetail {\n  observer: IntersectionObserver;\n  entry: IntersectionObserverEntry;\n}\n\nexport class CustomIntersectionEvent<T extends CustomIntersectionEventTypes> extends CustomEvent<CustomIntersectionEventDetail> {\n constructor(type: T, detail: CustomIntersectionEventDetail) {\n  super(type, {detail});\n }\n}\n\nexport type CustomIntersectionVisibilityEvents = CustomIntersectionEventTypes.visible | CustomIntersectionEventTypes.hidden;\n\nexport class CustomIntersectionVisibilityEvent extends CustomIntersectionEvent<CustomIntersectionVisibilityEvents> {\n constructor(detail: CustomIntersectionEventDetail) {\n  const type = detail.entry.isIntersecting ? CustomIntersectionEventTypes.visible : CustomIntersectionEventTypes.hidden;\n  super(type, detail);\n }\n}\n\nexport function canObserveIntersection() {\n  return 'IntersectionObserver' in window;\n}\n\nexport function createIntersctionObserver(options?: IntersectionObserverInit) {\n  if (!canObserveIntersection()) throw Error('missing IntersectionObserver @see polyfill');\n  return new IntersectionObserver(onIntersection, options);\n}\n\nfunction onIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserverInit) {\n  entries.forEach(onEntryInserction.bind(observer));\n}\n\nfunction onEntryInserction(this: IntersectionObserver, entry: IntersectionObserverEntry) {\n  const detail = {observer: this, entry};\n  entry.target.dispatchEvent(new CustomIntersectionEvent(CustomIntersectionEventTypes.intersection, detail));\n  entry.target.dispatchEvent(new CustomIntersectionVisibilityEvent(detail));\n}\n\nexport default createIntersctionObserver;"]}